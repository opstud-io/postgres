name: Build Extensions

on:
  schedule:
    - cron: '0 0 * * *'  # Build giornaliera
  workflow_dispatch:
    inputs:
      extension:
        description: 'Estensione specifica da costruire (lasciare vuoto per tutte)'
        required: false
      pg_version:
        description: 'Versione PostgreSQL'
        required: false
        default: '16'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Install yq and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - id: set-matrix
        run: |
          if [ "${{ github.event.inputs.extension }}" != "" ]; then
            VERSIONS="${{ github.event.inputs.pg_version }}"
            if [ -z "$VERSIONS" ]; then
              VERSIONS=$(yq eval ".extensions.${{ github.event.inputs.extension }}.versions[]" extensions.yml | tr '\n' ' ')
            fi
            matrix=$(jq -n \
              --arg ext "${{ github.event.inputs.extension }}" \
              --arg vers "$VERSIONS" \
              '{include: [{"extension": $ext, "pg_version": ($vers | split(" ")[0])}]}')
          else
            matrix=$(yq eval -o=json \
              '.extensions | to_entries | map({"extension": .key, "pg_version": .value.versions[]})' \
              extensions.yml)
            matrix=$(jq -n --argjson arr "$matrix" '{"include": $arr}')
          fi
          echo "matrix=$(echo $matrix | jq -c .)" >> $GITHUB_OUTPUT

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            git \
            jq \
            wget \
            python3-pip

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            image=moby/buildkit:latest
          buildkitd-flags: --debug

      - name: Docker info
        run: |
          docker info
          docker buildx version
          docker buildx ls

      - name: Check Existing Build
        id: check_build
        run: |
          ARTIFACT_NAME="${{ matrix.extension }}-pg${{ matrix.pg_version }}.tar.gz"
          # Verifica se l'artefatto esiste già su B2
          if b2 download-file-by-name your-bucket-name "$ARTIFACT_NAME" /dev/null 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Install B2 CLI
        if: steps.check_build.outputs.exists != 'true'
        run: |
          pip install b2

      - name: Build Extension
        if: steps.check_build.outputs.exists != 'true'
        run: |
          chmod +x ./scripts/build-extension.sh
          ./scripts/build-extension.sh ${{ matrix.extension }} ${{ matrix.pg_version }}

      - name: Upload to B2
        if: steps.check_build.outputs.exists != 'true'
        env:
          B2_APPLICATION_KEY_ID: ${{ secrets.B2_APPLICATION_KEY_ID }}
          B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
        run: |
          b2 authorize-account "$B2_APPLICATION_KEY_ID" "$B2_APPLICATION_KEY"
          cd artifacts
          for file in *.tar.gz; do
            b2 upload-file your-bucket-name "$file" "$file"
          done

      - name: Generate Download URL
        run: |
          ARTIFACT_NAME="${{ matrix.extension }}-pg${{ matrix.pg_version }}.tar.gz"
          echo "L'estensione può essere scaricata da:"
          echo "https://f002.backblazeb2.com/file/your-bucket-name/$ARTIFACT_NAME"

  list-builds:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install B2 CLI
        run: |
          pip install b2

      - name: List All Builds
        env:
          B2_APPLICATION_KEY_ID: ${{ secrets.B2_APPLICATION_KEY_ID }}
          B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
        run: |
          b2 authorize-account "$B2_APPLICATION_KEY_ID" "$B2_APPLICATION_KEY"
          
          echo "## Estensioni PostgreSQL Disponibili" > build_list.md
          echo "" >> build_list.md
          echo "| Estensione | Versione PG | Link Download |" >> build_list.md
          echo "|------------|-------------|---------------|" >> build_list.md
          
          b2 ls your-bucket-name | while read -r line; do
            if [[ $line == *.tar.gz ]]; then
              filename=$(echo "$line" | awk '{print $NF}')
              extension=$(echo "$filename" | cut -d'-' -f1)
              pg_version=$(echo "$filename" | grep -o 'pg[0-9]*' | sed 's/pg//')
              download_url="https://f002.backblazeb2.com/file/your-bucket-name/$filename"
              echo "| $extension | $pg_version | [Download]($download_url) |" >> build_list.md
            fi
          done
          
          echo "### Lista delle build disponibili:"
          cat build_list.md

      - name: Generate JSON Index
        run: |
          echo '{"builds": [' > builds.json
          b2 ls your-bucket-name | while read -r line; do
            if [[ $line == *.tar.gz ]]; then
              filename=$(echo "$line" | awk '{print $NF}')
              extension=$(echo "$filename" | cut -d'-' -f1)
              pg_version=$(echo "$filename" | grep -o 'pg[0-9]*' | sed 's/pg//')
              download_url="https://f002.backblazeb2.com/file/your-bucket-name/$filename"
              echo "{\"extension\": \"$extension\", \"pg_version\": \"$pg_version\", \"url\": \"$download_url\"}," >> builds.json
            fi
          done
          sed -i '$ s/,$//' builds.json
          echo ']}' >> builds.json
          
          b2 upload-file your-bucket-name builds.json builds.json

      - name: Upload Build List
        uses: actions/upload-artifact@v4
        with:
          name: build-list
          path: build_list.md
          retention-days: 1

      - name: Update Build List in Repository
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          if [ -f "BUILDS.md" ]; then
            rm BUILDS.md
          fi
          
          mv build_list.md BUILDS.md
          
          git add BUILDS.md
          git commit -m "Aggiorna lista delle build disponibili [skip ci]"
          git push