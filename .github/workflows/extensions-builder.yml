name: Extensions Builder
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      extension:
        description: 'Specific extension to build (leave blank for all)'
        required: false
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-tools

      - id: setup-cache
        run: |
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "cache-dir=.repo-cache" >> $GITHUB_OUTPUT

      - name: Cache Repository Info
        uses: actions/cache@v4
        id: repo-cache
        with:
          path: ${{ steps.setup-cache.outputs.cache-dir }}
          key: repo-cache-${{ steps.setup-cache.outputs.date }}
          restore-keys: |
            repo-cache-


      - id: set-matrix
        run: |
          CACHE_DIR="${{ steps.setup-cache.outputs.cache-dir }}"
    
          get_pgrx_version() {
            local ext=$1
            local cache_key="$ext-repo"
            local cache_path="$CACHE_DIR/$cache_key"
            
            # Verifica se esiste giÃ  nella cache
            if [ -d "$cache_path" ]; then
              echo "Using cached repository for $ext" >&2
              (cd "$cache_path" && git fetch --depth 1 >/dev/null 2>&1 && git reset --hard HEAD >/dev/null 2>&1)
            else
              echo "Cloning new repository for $ext" >&2
              local repo_url=$(yq e ".extensions.$ext.repository" extensions.yml)
              local branch=$(yq e ".extensions.$ext.branch" extensions.yml)
            
              mkdir -p "$CACHE_DIR"
              git clone --depth 1 -b "$branch" "$repo_url" "$cache_path" >/dev/null 2>&1
            fi
            
            # Estrai versione PGRX
            local pgrx_version=$(
              awk -F'"' '/^pgrx = "[0-9]/ {print $2; exit}' "$cache_path/Cargo.toml"
            )
            pgrx_version=${pgrx_version:-"0.13.1"}          
          
            # Estrai versione estensione
            local ext_version=$(
              awk -F'"' '/^version = / {print $2; exit}' "$cache_path/Cargo.toml"
            )
            
            
            # Ritorna entrambe le versioni
            echo "$pgrx_version|$ext_version"
          }
      
          if [ "${{ github.event.inputs.extension }}" != "" ]; then

          
            IFS='|' read -r PGRX_VERSION EXT_VERSION <<< "$(get_pgrx_version "${{ github.event.inputs.extension }}")"
          
            matrix=$(jq -n \
              --arg ext "${{ github.event.inputs.extension }}" \
              --arg pgrx "$PGRX_VERSION" \
              --arg ext_ver "$EXT_VERSION" \
              '{include: [{"extension": $ext, "pgrx_version": $pgrx, "extension_version": $ext_ver}]}')
          else
            matrix_items=()

            while IFS= read -r ext; do
            IFS='|' read -r PGRX_VERSION EXT_VERSION <<< "$(get_pgrx_version "$ext")"
            
            # Rimuovi il ciclo interno su pg_version
            matrix_items+=("{\"extension\": \"$ext\", \"pgrx_version\": \"$PGRX_VERSION\", \"extension_version\": \"$EXT_VERSION\"}")
            done < <(yq eval '.extensions | keys[]' extensions.yml)
          
            matrix=$(printf '%s\n' "${matrix_items[@]}" | jq -s '{include: .}')
    
          fi
          
          echo "matrix=$(echo $matrix | jq -c .)" >> $GITHUB_OUTPUT

  init-build-images:
    outputs:
      matrix: ${{ steps.unique-builds.outputs.matrix }}
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-tools

      - name: Generate unique build matrix
        id: unique-builds
        run: |
          matrix='${{ needs.setup.outputs.matrix }}'
          
          if [ -z "$matrix" ]; then
            echo "Error: Input matrix is empty!"
            exit 1
          fi
               
          echo "Processing matrix..."
          
          unique_combinations=$(echo "$matrix" | \
            jq -r '.include[] | "\(.pgrx_version)"' | \
            sort -u)
          
          
          build_matrix=$(echo "$unique_combinations" | \
            jq -R -s -c 'split("\n")[:-1] | map({"pgrx_version": .}) |
            {"include": .}')

          
          if echo "$build_matrix" | jq empty; then
            echo "matrix=$build_matrix" >> $GITHUB_OUTPUT
          else
            echo "Error: Invalid JSON matrix generated"
            exit 1
          fi


  build-pgrx:
    needs: init-build-images
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-latest-arm64' || 'ubuntu-latest' }}
    strategy:
      matrix:
        include:
          - platform: linux/amd64
          - platform: linux/arm64
        pgrx_version: ${{ fromJson(needs.init-build-images.outputs.matrix).include[*].pgrx_version }}
      max-parallel: 2
      fail-fast: false
    steps:

      - uses: actions/checkout@v4

      - name: Login to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: Check if image exist
        id: check_image
        continue-on-error: true
        run: |
          TAG="${{ matrix.pgrx_version }}"
          PLATFORM="${{ matrix.platform }}"
          if docker manifest inspect "quay.io/opstdio/pgrx:${TAG}" --platform "${PLATFORM}" > /dev/null 2>&1; then
            echo "Image exist for ${PLATFORM}"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Build needed for ${PLATFORM}"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        if: steps.check_image.outputs.exists != 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check_image.outputs.exists != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Docker Buildx
        if: steps.check_image.outputs.exists != 'true'
        run: |
          docker buildx build \
            --build-arg PGRX_VERSION=${{ matrix.pgrx_version }} \
            --platform ${{ matrix.platform }} \
            --output "type=image,push=true" \
            --tag quay.io/opstdio/pgrx:${{ matrix.pgrx_version }} \
            --file ./docker/pgrx/Dockerfile ./docker/pgrx \
            --progress=plain
