name: Extensions Builder
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      extension:
        description: 'Specific extension to build (leave blank for all)'
        required: false
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-tools

      - id: setup-cache
        run: |
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "cache-dir=.repo-cache" >> $GITHUB_OUTPUT

      - name: Cache Repository Info
        uses: actions/cache@v4
        id: repo-cache
        with:
          path: ${{ steps.setup-cache.outputs.cache-dir }}
          key: repo-cache-${{ steps.setup-cache.outputs.date }}
          restore-keys: |
            repo-cache-


      - id: set-matrix
        run: |
          CACHE_DIR="${{ steps.setup-cache.outputs.cache-dir }}"
    
          get_pgrx_version() {
            local ext=$1
            local cache_key="$ext-repo"
            local cache_path="$CACHE_DIR/$cache_key"
            
            # Verifica se esiste giÃ  nella cache
            if [ -d "$cache_path" ]; then
              echo "Using cached repository for $ext" >&2
              (cd "$cache_path" && git fetch --depth 1 >/dev/null 2>&1 && git reset --hard HEAD >/dev/null 2>&1)
            else
              echo "Cloning new repository for $ext" >&2
              local repo_url=$(yq e ".extensions.$ext.repository" extensions.yml)
              local branch=$(yq e ".extensions.$ext.branch" extensions.yml)
            
              mkdir -p "$CACHE_DIR"
              git clone --depth 1 -b "$branch" "$repo_url" "$cache_path" >/dev/null 2>&1
            fi
            
            # Estrai versione PGRX
            local pgrx_version=$(
              awk -F'"' '/^pgrx = "[0-9]/ {print $2; exit}' "$cache_path/Cargo.toml"
            )
            pgrx_version=${pgrx_version:-"0.13.1"}          
          
            # Estrai versione estensione
            local ext_version=$(
              awk -F'"' '/^version = / {print $2; exit}' "$cache_path/Cargo.toml"
            )
            
            
            # Ritorna entrambe le versioni
            echo "$pgrx_version|$ext_version"
          }
      
          if [ "${{ github.event.inputs.extension }}" != "" ]; then
            IFS='|' read -r PGRX_VERSION EXT_VERSION <<< "$(get_pgrx_version "${{ github.event.inputs.extension }}")"
    
            # Ottieni le versioni PostgreSQL per l'estensione specifica
            PG_VERSIONS=$(yq eval ".extensions.${{ github.event.inputs.extension }}.pg_versions[]" extensions.yml)
            
            # Genera matrix con tutte le versioni PostgreSQL
            matrix_items=()
            for PG_VERSION in $PG_VERSIONS; do
            matrix_items+=("{\"extension\": \"${{ github.event.inputs.extension }}\", \"pgrx_version\": \"$PGRX_VERSION\", \"extension_version\": \"$EXT_VERSION\", \"pg_version\": \"$PG_VERSION\"}")
            done
            
            matrix=$(printf '%s\n' "${matrix_items[@]}" | jq -s '{include: .}')
              
          else
            matrix_items=()

            while IFS= read -r ext; do
              IFS='|' read -r PGRX_VERSION EXT_VERSION <<< "$(get_pgrx_version "$ext")"
              PG_VERSIONS=$(yq eval ".extensions.$ext.pg_versions[]" extensions.yml)          
          
              # Rimuovi il ciclo interno su pg_version
              for PG_VERSION in $PG_VERSIONS; do
                matrix_items+=("{\"extension\": \"$ext\", \"pgrx_version\": \"$PGRX_VERSION\", \"extension_version\": \"$EXT_VERSION\", \"pg_version\": \"$PG_VERSION\"}")
              done
            done < <(yq eval '.extensions | keys[]' extensions.yml)
          
            matrix=$(printf '%s\n' "${matrix_items[@]}" | jq -s '{include: .}')
    
          fi
          
          echo "matrix=$(echo $matrix | jq -c .)" >> $GITHUB_OUTPUT

  init-build-images:
    outputs:
      matrix: ${{ steps.unique-builds.outputs.matrix }}
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-tools

      - name: Generate unique build matrix
        id: unique-builds
        run: |
          matrix='${{ needs.setup.outputs.matrix }}'
          
          if [ -z "$matrix" ]; then
            echo "Error: Input matrix is empty!"
            exit 1
          fi
               
          echo "Processing matrix..."
          
          unique_combinations=$(echo "$matrix" | \
            jq -r '.include[] | "\(.pgrx_version)"' | \
            sort -u)
          
          build_matrix=$(echo "$matrix" | \
              jq -c --argjson unique_versions "[$( echo "$unique_pgrx_versions" | sed 's/^/"/; s/$/"/; tr '\n' ',' | sed 's/,$//' )]" '
              .include |
              map(select(.pgrx_version | IN($unique_versions[]))) |
              map({
              "pgrx_version": .pgrx_version,
              "platform": "linux/amd64"
            }) +
              map({
              "pgrx_version": .pgrx_version,
              "platform": "linux/arm64"
            }) |
              {
                "include": .
              }')

          
          if echo "$build_matrix" | jq empty; then
            echo "matrix=$build_matrix" >> $GITHUB_OUTPUT
          else
            echo "Error: Invalid JSON matrix generated"
            exit 1
          fi

  build-pgrx:
    needs: init-build-images
    runs-on: ${{
        matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' ||
        matrix.platform == 'linux/amd64' && 'ubuntu-latest' ||
        'ubuntu-latest'
      }}
    strategy:
      matrix: ${{ fromJson(needs.init-build-images.outputs.matrix) }}
      fail-fast: false
      max-parallel: 2
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-tools

      - name: Debug Matrix
        run: |
          echo "Platform: ${{ matrix.platform }}"
          echo "Pgrx Version: ${{ matrix.pgrx_version }}"

      - name: Login to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: Check if image exist
        id: check_image
        continue-on-error: true
        run: |
          TAG="${{ matrix.pgrx_version }}"
          PLATFORM="${{ matrix.platform }}"

          ARCH=$(echo "$PLATFORM" | cut -d'/' -f2)
          OS=$(echo "$PLATFORM" | cut -d'/' -f1)

          # Verifica se l'immagine specifica per architettura esiste
          if docker manifest inspect "quay.io/opstdio/pgrx:${TAG}-${ARCH}" > /dev/null 2>&1; then
            echo "Image exist for ${PLATFORM}"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            # Se non esiste, prova a verificare il manifest multi-architettura
            MANIFEST=$(docker manifest inspect "quay.io/opstdio/pgrx:${TAG}" || echo "{}")

            PLATFORM_EXISTS=$(echo "$MANIFEST" | jq -r --arg ARCH "$ARCH" --arg OS "$OS" '.manifests[] | select(.platform.architecture == $ARCH and .platform.os == $OS) | length > 0')

            if [ "$PLATFORM_EXISTS" = "true" ]; then
              echo "Image exist in multi-arch manifest for ${PLATFORM}"
              echo "exists=true" >> $GITHUB_OUTPUT
            else
              echo "Build needed for ${PLATFORM}"
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          fi
      

      - name: Set up QEMU
        if: steps.check_image.outputs.exists != 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check_image.outputs.exists != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Docker Buildx
        if: steps.check_image.outputs.exists != 'true'
        run: |
          ARCH=$(echo "${{ matrix.platform }}" | cut -d'/' -f2)

          # Costruisci l'immagine per la piattaforma corrente
          docker buildx build \
            --build-arg PGRX_VERSION=${{ matrix.pgrx_version }} \
            --platform ${{ matrix.platform }} \
            --output "type=image,push=true" \
            --tag quay.io/opstdio/pgrx:${{ matrix.pgrx_version }}-$ARCH \
            --file ./docker/pgrx/Dockerfile ./docker/pgrx \
            --progress=plain

          # Crea un file di lock unico per job
          LOCK_FILE="/tmp/pgrx_build_${{ matrix.pgrx_version }}_$ARCH.lock"
          touch "$LOCK_FILE"      



  create-multi-arch-manifest:
    needs: [ init-build-images, build-pgrx ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-tools

      - name: Login to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Multi-Arch Manifest
        run: |
          matrix='${{ needs.init-build-images.outputs.matrix }}'
          if [ -z "$matrix" ]; then
            echo "Error: Input matrix is empty!"
            exit 1
          fi
          
          echo "Processing matrix..."
          VERSIONS=$(echo "$matrix" | jq -r '.include[].pgrx_version' | sort -u)
        
          
          for VERSION in $VERSIONS; do
            ARCH_IMAGES=()
          
            if docker buildx imagetools inspect "quay.io/opstdio/pgrx:${VERSION}-amd64" > /dev/null 2>&1; then
              ARCH_IMAGES+=("quay.io/opstdio/pgrx:${VERSION}-amd64")
            fi
          
            if docker buildx imagetools inspect "quay.io/opstdio/pgrx:${VERSION}-arm64" > /dev/null 2>&1; then
              ARCH_IMAGES+=("quay.io/opstdio/pgrx:${VERSION}-arm64")
            fi
          
            if [ ${#ARCH_IMAGES[@]} -gt 0 ]; then
              echo "Creating Manifest for $VERSION"
              docker buildx imagetools create \
                -t "quay.io/opstdio/pgrx:$VERSION" \
                "${ARCH_IMAGES[@]}"
            else
              echo "No images for $VERSION"
            fi
          done
        

