name: Extensions Builder
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      extension:
        description: 'Specific extension to build (leave blank for all)'
        required: false
      pg_version:
        description: 'PostgreSQL Version'
        required: false
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-tools

      - id: setup-cache
        run: |
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "cache-dir=.repo-cache" >> $GITHUB_OUTPUT

      - name: Cache Repository Info
        uses: actions/cache@v4
        id: repo-cache
        with:
          path: ${{ steps.setup-cache.outputs.cache-dir }}
          key: repo-cache-${{ steps.setup-cache.outputs.date }}
          restore-keys: |
            repo-cache-


      - id: set-matrix
        run: |
          CACHE_DIR="${{ steps.setup-cache.outputs.cache-dir }}"
    
          get_pgrx_version() {
            local ext=$1
            local cache_key="$ext-repo"
            local cache_path="$CACHE_DIR/$cache_key"
            
            # Verifica se esiste giÃ  nella cache
            if [ -d "$cache_path" ]; then
              echo "Using cached repository for $ext" >&2
              (cd "$cache_path" && git fetch --depth 1 >/dev/null 2>&1 && git reset --hard HEAD >/dev/null 2>&1)
            else
              echo "Cloning new repository for $ext" >&2
              local repo_url=$(yq e ".extensions.$ext.repository" extensions.yml)
              local branch=$(yq e ".extensions.$ext.branch" extensions.yml)
            
              mkdir -p "$CACHE_DIR"
              git clone --depth 1 -b "$branch" "$repo_url" "$cache_path" >/dev/null 2>&1
            fi
            
            # Estrai versione PGRX
            local pgrx_version=$(grep -m1 'pgrx = "[^"]*"' "$cache_path/Cargo.toml" | grep -o '"[^"]*"' | tr -d '"')
            # Estrai versione estensione
            local ext_version=$(grep -m1 '^version = "[^"]*"' "$cache_path/Cargo.toml" | grep -o '"[^"]*"' | tr -d '"')
            
            # Ritorna entrambe le versioni
            echo "$pgrx_version|$ext_version"
          }
      
          if [ "${{ github.event.inputs.extension }}" != "" ]; then
            VERSIONS="${{ github.event.inputs.pg_version }}"
            if [ -z "$VERSIONS" ]; then
              VERSIONS=$(yq eval ".extensions.${{ github.event.inputs.extension }}.versions[]" extensions.yml | tr '\n' ' ')
            fi
          
            IFS='|' read -r PGRX_VERSION EXT_VERSION <<< "$(get_pgrx_version "${{ github.event.inputs.extension }}")"
          
            matrix=$(jq -n \
              --arg ext "${{ github.event.inputs.extension }}" \
              --arg vers "$VERSIONS" \
              --arg pgrx "$PGRX_VERSION" \
              --arg ext_ver "$EXT_VERSION" \
              '{include: [{"extension": $ext, "pg_version": ($vers | split(" ")[0]), "pgrx_version": $pgrx, "extension_version": $ext_ver}]}')
          else
            matrix_items=()
          
            while IFS= read -r ext; do
              IFS='|' read -r PGRX_VERSION EXT_VERSION <<< "$(get_pgrx_version "$ext")"
              versions=$(yq eval ".extensions.$ext.versions[]" extensions.yml)
          
              while IFS= read -r pg_version; do
                matrix_items+=("{\"extension\": \"$ext\", \"pg_version\": \"$pg_version\", \"pgrx_version\": \"$PGRX_VERSION\", \"extension_version\": \"$EXT_VERSION\"}")
              done <<< "$versions"
            done < <(yq eval '.extensions | keys[]' extensions.yml)
          
            matrix=$(printf '%s\n' "${matrix_items[@]}" | jq -s '{include: .}')
          fi
          
          echo "matrix=$(echo $matrix | jq -c .)" >> $GITHUB_OUTPUT

  init-build-images:
    outputs:
      matrix: ${{ steps.unique-builds.outputs.matrix }}
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-tools

      - name: Generate unique build matrix
        id: unique-builds
        run: |
          matrix='${{ needs.setup.outputs.matrix }}'
          
          if [ -z "$matrix" ]; then
            echo "Error: Input matrix is empty!"
            exit 1
          fi
               
          echo "Processing matrix..."
          echo "$matrix" | jq -r '.include[] | "\(.pg_version):\(.pgrx_version)"'
          
          unique_combinations=$(echo "$matrix" | \
            jq -r '.include[] | "\(.pg_version):\(.pgrx_version)"' | \
            sort -u)

          
          build_matrix=$(echo "$unique_combinations" | \
            jq -R -s -c 'split("\n")[:-1] | map(split(":")) | 
            map({"pg_version": .[0], "pgrx_version": .[1]}) | 
            {"include": .}')
          
          if echo "$build_matrix" | jq empty; then
            echo "matrix=$build_matrix" >> $GITHUB_OUTPUT
          else
            echo "Error: Invalid JSON matrix generated"
            exit 1
          fi


  build-pgrx:
    needs: init-build-images
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.init-build-images.outputs.matrix) }}
      fail-fast: false
    steps:

      - uses: actions/checkout@v4

      - name: Login to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: Check if image exist
        id: check_image
        continue-on-error: true
        run: |
          TAG="${{ matrix.pgrx_version }}-${{ matrix.pg_version }}"
          if docker manifest inspect "quay.io/opsio/pgrx:${TAG}" > /dev/null 2>&1; then
            echo "Image exist"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Build needed"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        if: steps.check_image.outputs.exists != 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check_image.outputs.exists != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Docker Buildx
        if: steps.check_image.outputs.exists != 'true'
        run: |
          docker buildx build \
            --build-arg PSQL_SUPPORT_VERSION=${{ matrix.pg_version }} \
            --build-arg PGRX_VERSION=${{ matrix.pgrx_version }} \
            --platform linux/amd64,linux/arm64 \
            --output "type=image,push=true" \
            --tag quay.io/opsio/pgrx:${{ matrix.pgrx_version }}-${{ matrix.pg_version }} \
            --file ./docker/pgrx/Dockerfile ./docker/pgrx \
            --cache-from=type=registry,ref=quay.io/opsio/pgrx:cache \
            --cache-to=type=registry,ref=quay.io/opsio/pgrx:cache,mode=max \
            --progress=plain
